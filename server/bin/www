#!/usr/bin/env node

/**
 * Module dependencies
 */

var app = require('../app');
var http = require('http');
const io = require('socket.io')();
var config = require('../config.json');
const jwt = require('jsonwebtoken');

/**
 * Get port from environment and store in Express
 */
var port = normalizePort(process.env.PORT || config.port);
let socketPort = normalizePort(process.env.SOCKETPORT || config.socketPort);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Setup socket.io connection and add methods for handling
 * different events.
 */
let socketServer = http.createServer(app);
io.attach(socketServer);

// Initialize our websocket server on port socketPort
socketServer.listen(socketPort, () => {
    console.log('Socket server started on port ' + socketPort);
});

io.use((socket, next) => {
    if (socket.handshake.query && socket.handshake.query.token) {
        jwt.verify(socket.handshake.query.token, config.secretKey, function(err, decoded) {
            if (err) return next(new Error('Authentication error in socket during verification.'));
            socket.decoded = decoded;
            console.log(socket.request.headers.cookie);
            return next();
        });
    }
    return next(new Error('Authentication error in socket.'));
});

io.on('connection', (socket) => {
    // Log whenever a user connects
    console.log('Connected client on port ' + socketPort);

    // Log whenever a client disconnects from our websocket server
    socket.on('disconnect', function() {
        console.log('Client disconnected');
    });

    // Game creation event
    // When the client emits a "game created" event, we just emit back the information
    // and subscribe on the client's side
    socket.on('game created', (payload) => {
        socket.broadcast.emit('user created game', payload);
    });

    // When the client emits a "join room" event, add the client's socket ID
    // to the given room
    socket.on('join room', (room) => {
        console.log('Client joining room ' + room);
        let socketRooms = socket.rooms[socket.id];
        // console.log(Object.keys(socket.rooms));

        // We have to make sure the socket hasn't already been added to the room
        // so we don't end up trying to add them twice
        if ((socketRooms != null && socketRooms != undefined) && socketRooms.indexOf(room) < 0) {
            socket.join(room, () => {
                // console.log(socket.rooms);
            });
        }
    });

    // When the client emits a "joined game" event, we let everyone in the room know about
    // event
    socket.on('joined game', (gameCode) => {
        console.log(socket.decoded);
        const joinedGamePayload = {
            userDetails: socket.decoded,
            gameCode: gameCode
        };
        socket.to('game ' + gameCode).emit('user joined game', joinedGamePayload);
    });

    // When we receive a 'message' event from our client, print out
    // the contents of that message and then echo it back to our client
    // using `io.emit()`
    socket.on('message', (message) => {
        console.log('Message received: ' + message);
        io.emit('message', {
            type: 'new-message',
            text: message
        });
    });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (err.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

    console.log("Express server listening on " + bind);
}
